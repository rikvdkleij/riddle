(function() {var implementors = {};
implementors["riddle"] = [{"text":"impl From&lt;AudioError&gt; for RiddleError","synthetic":false,"types":[]},{"text":"impl From&lt;FontError&gt; for RiddleError","synthetic":false,"types":[]},{"text":"impl From&lt;ImageError&gt; for RiddleError","synthetic":false,"types":[]},{"text":"impl From&lt;InputError&gt; for RiddleError","synthetic":false,"types":[]},{"text":"impl From&lt;RendererError&gt; for RiddleError","synthetic":false,"types":[]},{"text":"impl From&lt;PlatformError&gt; for RiddleError","synthetic":false,"types":[]}];
implementors["riddle_audio"] = [{"text":"impl From&lt;CommonError&gt; for AudioError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for AudioError","synthetic":false,"types":[]}];
implementors["riddle_common"] = [{"text":"impl&lt;E:&nbsp;ColorElement&gt; From&lt;[E; 4]&gt; for Color&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;ColorElement&gt; From&lt;[E; 3]&gt; for Color&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; From&lt;Color&lt;E&gt;&gt; for [E; 4]","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; From&lt;Color&lt;E&gt;&gt; for [E; 3]","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static + Sync + Send&gt;&gt; for CommonError","synthetic":false,"types":[]}];
implementors["riddle_font"] = [{"text":"impl From&lt;CommonError&gt; for FontError","synthetic":false,"types":[]},{"text":"impl From&lt;ImageError&gt; for FontError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for FontError","synthetic":false,"types":[]}];
implementors["riddle_image"] = [{"text":"impl From&lt;CommonError&gt; for ImageError","synthetic":false,"types":[]},{"text":"impl From&lt;ImageError&gt; for CommonError","synthetic":false,"types":[]},{"text":"impl From&lt;ImageError&gt; for ImageError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ImageError","synthetic":false,"types":[]}];
implementors["riddle_input"] = [{"text":"impl From&lt;GamepadId&gt; for GamePadId","synthetic":false,"types":[]},{"text":"impl From&lt;GamePadId&gt; for GamepadId","synthetic":false,"types":[]},{"text":"impl From&lt;GamePadButton&gt; for Button","synthetic":false,"types":[]}];
implementors["riddle_math"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; From&lt;[T; 2]&gt; for Vector2&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; From&lt;Vector2&lt;T&gt;&gt; for Vector2&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Vec2&gt; for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;f32: SpacialNumericConversion&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;SpacialNumericConversion&lt;f32&gt;&gt; From&lt;Vector2&lt;T&gt;&gt; for Vec2","synthetic":false,"types":[]}];
implementors["riddle_platform_common"] = [{"text":"impl From&lt;LogicalVec2&gt; for LogicalSize","synthetic":false,"types":[]},{"text":"impl From&lt;Vector2&lt;u32&gt;&gt; for LogicalSize","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalSize&gt; for Vector2&lt;f32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalVec2&gt; for LogicalPosition","synthetic":false,"types":[]},{"text":"impl From&lt;Vector2&lt;u32&gt;&gt; for LogicalPosition","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalPosition&gt; for Vector2&lt;f32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalSize&gt; for LogicalVec2","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalPosition&gt; for LogicalVec2","synthetic":false,"types":[]},{"text":"impl From&lt;Vector2&lt;u32&gt;&gt; for LogicalVec2","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalVec2&gt; for Vector2&lt;f32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Scancode","synthetic":false,"types":[]}];
implementors["riddle_renderer_wgpu"] = [{"text":"impl From&lt;ImageError&gt; for RendererError","synthetic":false,"types":[]},{"text":"impl From&lt;CommonError&gt; for RendererError","synthetic":false,"types":[]},{"text":"impl From&lt;FilterMode&gt; for FilterMode","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()