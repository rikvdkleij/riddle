(function() {var implementors = {};
implementors["riddle"] = [{"text":"impl&lt;'a&gt; !Send for RiddleContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for RiddleLib","synthetic":true,"types":[]},{"text":"impl Send for RiddleState","synthetic":true,"types":[]},{"text":"impl Send for RiddleError","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]}];
implementors["riddle_audio"] = [{"text":"impl Send for AudioSystem","synthetic":true,"types":[]},{"text":"impl Send for AudioSystemHandle","synthetic":true,"types":[]},{"text":"impl Send for AudioSystemWeak","synthetic":true,"types":[]},{"text":"impl !Send for AudioMainThreadState","synthetic":true,"types":[]},{"text":"impl Send for Clip","synthetic":true,"types":[]},{"text":"impl Send for ClipPlayer","synthetic":true,"types":[]},{"text":"impl Send for ClipPlayerBuilder","synthetic":true,"types":[]},{"text":"impl Send for ClipFormat","synthetic":true,"types":[]},{"text":"impl Send for PlayMode","synthetic":true,"types":[]},{"text":"impl Send for AudioError","synthetic":true,"types":[]}];
implementors["riddle_common"] = [{"text":"impl&lt;E&gt; Send for Color&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CommonError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EventPub&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EventSub&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["riddle_font"] = [{"text":"impl Send for TTFont","synthetic":true,"types":[]},{"text":"impl Send for FontError","synthetic":true,"types":[]}];
implementors["riddle_image"] = [{"text":"impl Send for Image","synthetic":true,"types":[]},{"text":"impl Send for ImageFormat","synthetic":true,"types":[]},{"text":"impl Send for ImageError","synthetic":true,"types":[]}];
implementors["riddle_input"] = [{"text":"impl Send for GamePadId","synthetic":true,"types":[]},{"text":"impl Send for InputSystem","synthetic":true,"types":[]},{"text":"impl Send for InputSystemHandle","synthetic":true,"types":[]},{"text":"impl Send for InputSystemWeak","synthetic":true,"types":[]},{"text":"impl Send for InputMainThreadState","synthetic":true,"types":[]},{"text":"impl Send for KeyboardModifiers","synthetic":true,"types":[]},{"text":"impl Send for InputError","synthetic":true,"types":[]},{"text":"impl Send for InputEvent","synthetic":true,"types":[]},{"text":"impl Send for GamePadButton","synthetic":true,"types":[]},{"text":"impl Send for GamePadAxis","synthetic":true,"types":[]}];
implementors["riddle_math"] = [{"text":"impl&lt;T&gt; Send for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["riddle_platform_common"] = [{"text":"impl Send for LogicalSize","synthetic":true,"types":[]},{"text":"impl Send for LogicalPosition","synthetic":true,"types":[]},{"text":"impl Send for LogicalVec2","synthetic":true,"types":[]},{"text":"impl Send for WindowId","synthetic":true,"types":[]},{"text":"impl Send for PlatformEvent","synthetic":true,"types":[]},{"text":"impl Send for MouseButton","synthetic":true,"types":[]},{"text":"impl Send for Scancode","synthetic":true,"types":[]},{"text":"impl Send for VirtualKey","synthetic":true,"types":[]}];
implementors["riddle_platform_winit"] = [{"text":"impl&lt;'a&gt; !Send for PlatformContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PlatformSystem","synthetic":true,"types":[]},{"text":"impl Send for PlatformSystemHandle","synthetic":true,"types":[]},{"text":"impl Send for PlatformSystemWeak","synthetic":true,"types":[]},{"text":"impl !Send for PlatformMainThreadState","synthetic":true,"types":[]},{"text":"impl Send for Window","synthetic":true,"types":[]},{"text":"impl Send for WindowHandle","synthetic":true,"types":[]},{"text":"impl Send for WindowWeak","synthetic":true,"types":[]},{"text":"impl Send for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Send for PlatformError","synthetic":true,"types":[]}];
implementors["riddle_renderer_wgpu"] = [{"text":"impl Send for SpriteRenderCommand","synthetic":true,"types":[]},{"text":"impl Send for SpriteBuilder","synthetic":true,"types":[]},{"text":"impl Send for RendererError","synthetic":true,"types":[]},{"text":"impl Send for FilterMode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WGPUDeviceInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; Send for WGPURenderer&lt;Device&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Device: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WGPURendererHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WGPURendererWeak&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; Send for WGPUSprite&lt;Device&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Device: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Device&gt; Send for WGPUSpriteAtlasBuilder&lt;'a, Device&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Device: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; Send for WGPUSpriteRenderTarget&lt;Device&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Device: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WindowWGPUDevice","synthetic":true,"types":[]}];
implementors["riddle_time"] = [{"text":"impl Send for TimeSystem","synthetic":true,"types":[]},{"text":"impl Send for TimeSystemHandle","synthetic":true,"types":[]},{"text":"impl Send for TimeSystemWeak","synthetic":true,"types":[]},{"text":"impl Send for TimerHandle","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()