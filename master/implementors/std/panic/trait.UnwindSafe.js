(function() {var implementors = {};
implementors["riddle"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for RiddleContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RiddleLib","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RiddleState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RiddleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]}];
implementors["riddle_audio"] = [{"text":"impl UnwindSafe for AudioSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioSystemHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioSystemWeak","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AudioMainThreadState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Clip","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClipPlayer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClipPlayerBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClipFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlayMode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AudioError","synthetic":true,"types":[]}];
implementors["riddle_common"] = [{"text":"impl&lt;E&gt; UnwindSafe for Color&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CommonError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EventPub&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventSub&lt;T&gt;","synthetic":true,"types":[]}];
implementors["riddle_font"] = [{"text":"impl UnwindSafe for TTFont","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FontError","synthetic":true,"types":[]}];
implementors["riddle_image"] = [{"text":"impl UnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ImageError","synthetic":true,"types":[]}];
implementors["riddle_input"] = [{"text":"impl UnwindSafe for GamePadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSystemHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSystemWeak","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InputMainThreadState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyboardModifiers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GamePadButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GamePadAxis","synthetic":true,"types":[]}];
implementors["riddle_math"] = [{"text":"impl&lt;T&gt; UnwindSafe for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["riddle_platform_common"] = [{"text":"impl UnwindSafe for LogicalSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalVec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scancode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VirtualKey","synthetic":true,"types":[]}];
implementors["riddle_platform_winit"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for PlatformContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformSystemHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformSystemWeak","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PlatformMainThreadState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WindowHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WindowWeak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformError","synthetic":true,"types":[]}];
implementors["riddle_renderer_wgpu"] = [{"text":"impl UnwindSafe for SpriteRenderCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RendererError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterMode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WGPUDeviceInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; !UnwindSafe for WGPURenderer&lt;Device&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WGPURendererHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WGPURendererWeak&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; !UnwindSafe for WGPUSprite&lt;Device&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Device&gt; !UnwindSafe for WGPUSpriteAtlasBuilder&lt;'a, Device&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; !UnwindSafe for WGPUSpriteRenderTarget&lt;Device&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WindowWGPUDevice","synthetic":true,"types":[]}];
implementors["riddle_time"] = [{"text":"impl UnwindSafe for TimeSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeSystemHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeSystemWeak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerHandle","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()