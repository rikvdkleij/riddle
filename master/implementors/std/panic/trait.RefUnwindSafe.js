(function() {var implementors = {};
implementors["riddle"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for RiddleContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RiddleLib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RiddleState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RiddleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]}];
implementors["riddle_audio"] = [{"text":"impl RefUnwindSafe for AudioSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioSystemHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioSystemWeak","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AudioMainThreadState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clip","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClipPlayer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClipPlayerBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClipFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlayMode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AudioError","synthetic":true,"types":[]}];
implementors["riddle_common"] = [{"text":"impl&lt;E&gt; RefUnwindSafe for Color&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommonError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EventPub&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EventSub&lt;T&gt;","synthetic":true,"types":[]}];
implementors["riddle_font"] = [{"text":"impl RefUnwindSafe for TTFont","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FontError","synthetic":true,"types":[]}];
implementors["riddle_image"] = [{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImageError","synthetic":true,"types":[]}];
implementors["riddle_input"] = [{"text":"impl RefUnwindSafe for GamePadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSystemHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSystemWeak","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InputMainThreadState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyboardModifiers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GamePadButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GamePadAxis","synthetic":true,"types":[]}];
implementors["riddle_math"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["riddle_platform_common"] = [{"text":"impl RefUnwindSafe for LogicalSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalVec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scancode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VirtualKey","synthetic":true,"types":[]}];
implementors["riddle_platform_winit"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for PlatformContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformSystemHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformSystemWeak","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PlatformMainThreadState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowWeak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformError","synthetic":true,"types":[]}];
implementors["riddle_renderer_wgpu"] = [{"text":"impl RefUnwindSafe for SpriteRenderCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RendererError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterMode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WGPUDeviceInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; !RefUnwindSafe for WGPURenderer&lt;Device&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WGPURendererHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WGPURendererWeak&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; !RefUnwindSafe for WGPUSprite&lt;Device&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Device&gt; !RefUnwindSafe for WGPUSpriteAtlasBuilder&lt;'a, Device&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Device&gt; !RefUnwindSafe for WGPUSpriteRenderTarget&lt;Device&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowWGPUDevice","synthetic":true,"types":[]}];
implementors["riddle_time"] = [{"text":"impl RefUnwindSafe for TimeSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSystemHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSystemWeak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerHandle","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()